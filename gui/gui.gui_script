local datos = require("main.datos")
local dif_entre_casillas = 96
local function clonar_nodo(self, que_nodo, que_hash, pos, que_tabla)
	local nuevo_nodo = gui.clone_tree(que_nodo)
	local clon_nodo = nuevo_nodo[que_hash]
	gui.set_position(clon_nodo, pos)
	table.insert(que_tabla, nuevo_nodo)
	datos.obj_en_mouse = clon_nodo
	--print(datos.obj_en_mouse)
end

function init(self)
	
	
	self.mouse_sobre_casillas = false -- Registra si el mouse está sobre un casillero.
	-- nodos -----------------------------------------
	self.casilla = gui.get_node("casilla") -- casilla vacía
	-- obj toolbar
	self.espejo = gui.get_node("espejo")
	self.izq = gui.get_node("izq")
	self.der = gui.get_node("der")
	-- tablas -----------------------------------------
	self.casillas = {}
	self.espejos = {}
	---------------------------------------------------
	
	self.obj_seleccionado = ""

	msg.post("", "acquire_input_focus")

	---------------------------------------------------
	self.pos = vmath.vector3(440,600,0) -- posicion inicial para crear la grilla
	for i = 1, 5 do	
		for i = 1, 5 do	
			local nueva_casilla = gui.clone_tree(self.casilla)
			local clon_casilla = nueva_casilla[hash("casilla")]	
			gui.set_position(clon_casilla, self.pos)
			self.pos.x = self.pos.x + dif_entre_casillas
			table.insert(self.casillas, {nueva_casilla, ocupado = false})
		end
		self.pos.x = 440
		self.pos.y = self.pos.y - dif_entre_casillas
	end
	gui.set_enabled(self.casilla, false) -- ver que esto no haga bardo dsp
	---------------------------------------------------
end

--function update(self, dt)

--end

function on_message(self, message_id, message, sender)
	if message_id == hash("obj_seleccionado") then
		self.obj_seleccionado = message.objeto
		print(self.obj_seleccionado .. " <from> guiscript")
	end
end

function on_input(self, action_id, action)
	--[[ --esto hay que cambuiar dsp a rotar objs
	if action_id == hash("touch") and action.pressed then
		if gui.pick_node(self.izq, action.x, action.y) then
			msg.post(self.obj_seleccionado, "accion_gui", {accion= "rot_izq", valor = 1})
		elseif gui.pick_node(self.der, action.x, action.y)then
			msg.post(self.obj_seleccionado, "accion_gui", {accion= "rot_der", valor = -1})
		end
	end
	]]
	--print(action_id)
	
	if action_id == hash("touch") then -- crea objetos y los reja en una casilla o elimina, drag and drop.
		
		if action.pressed then
			if gui.pick_node(self.espejo, action.x, action.y) then
				--crear espejo para poner
				clonar_nodo(self, self.espejo, hash("espejo"), vmath.vector3(action.x, action.y, 0), self.espejos)
			end
		elseif action.released then
			if self.mouse_sobre_casillas == false and datos.obj_en_mouse ~= nil then
				-- Suelta y elimina el objeto si se soltó por fuera de una casilla y libera "obj_en_mouse".
				-- Acá se puede chequear si que pasa si se suelta sobre otro nodo o casilla ya ocupada.
				gui.delete_node(datos.obj_en_mouse)
				datos.obj_en_mouse = nil
			else
				-- Suelta el objeto dejándolo en una casilla, la función de abajo se encarga de esto. Libera "obj_en_mouse".
				datos.obj_en_mouse = nil
			end
		end
	end
	
	if action_id == nil then
		datos.pos_del_mouse.x = action.x -- Guarda la pos del mouse en movimiento.
		datos.pos_del_mouse.y = action.y
		
		for _,casillero in pairs(self.casillas) do -- Repasa la tabla de self.casillas
			
			if gui.pick_node(casillero[1][("casilla")], action.x, action.y) then
				self.mouse_sobre_casillas = true
				if datos.obj_en_mouse ~= nil then
					-- Si el mouse tiene un objeto y está sobre una casilla guarda la posición de esa casilla.
					-- Además pone al obj_en_mouse en esa posición.
					-- Así cuando el touch es released y se está sobre una casilla el objeto queda en esa posición.
					local pos = gui.get_position(casillero[1][("casilla")])
					gui.set_position(datos.obj_en_mouse, pos)
					pprint(casillero[1]["casilla"] )--.. casillero["ocupado"])
				end
				return -- Tope para que el mouse sobre cailla y el código de arriba funcione.
			end
			self.mouse_sobre_casillas = false -- resetea el mouse sobre casillas para que no se cuelgue.
		end
		if datos.obj_en_mouse ~= nil then
			-- Esto hace que el objeto en mouse siga al mouse cuando no está sobre una casilla.
			gui.set_position(datos.obj_en_mouse, datos.pos_del_mouse)
		end
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
