local datos = require("main.datos")
local niveles = require("gui.niveles")

local dif_entre_casillas = 144
local function clonar_nodo(self, que_nodo, que_hash, pos, que_tabla, en_mouse)
	local nuevo_nodo = gui.clone_tree(que_nodo)
	local clon_nodo = nuevo_nodo[que_hash]
	gui.set_position(clon_nodo, pos)
	table.insert(que_tabla, nuevo_nodo)
	local obj_en_mouse = en_mouse
	if obj_en_mouse == true then
		datos.obj_en_mouse = clon_nodo
	end
	return clon_nodo
end

-- switches ---------------------

local function switch_activado(self)
	self.cantidad_de_switches_activados = self.cantidad_de_switches_activados + 1

	if self.cantidad_de_switches_activados == self.cantidad_de_switches_en_el_nivel and self.laser_en_barrera == false then
		--print("Cantidad de switches alcanzada, desactivar barrera: " .. self.cantidad_de_switches_activados .. "/" .. self.cantidad_de_switches_en_el_nivel)
		local function apagar_barrera(self)
			gui.set_enabled(self.barrera, false)
		end
		timer.delay(0.25, false, apagar_barrera)
		msg.post("/barrera#barrera", "desactivar_barrera")
	else
		--print("Switches activados: " .. self.cantidad_de_switches_activados .. "/" .. self.cantidad_de_switches_en_el_nivel)
	end
end

-- laser beam -------------------
local function dist2d(x1, y1, x2, y2)
	return ((x2-x1)^2+(y2-y1)^2)^0.5
end

local function angle_of_vector_between_two_points(x1,y1, x2,y2) 
	return math.atan2(y2-y1, x2-x1) 
end

---------------------------------

function init(self)
	--msg.post("@render:", "clear_color", { color = vmath.vector4(0.15, 0.25, 0.15, 0) } )
	--msg.post("@render:", "clear_color", { color = vmath.vector4(1, 1, 1, 0) } )
	-- niveles ----------------------------------------
	self.nivel = 1
	self.contador_para_leer_mapa_nivel = 1

	self.cantidad_de_switches_en_el_nivel = niveles[self.nivel]["switches"]
	self.cantidad_de_switches_activados = 0
	--------------------------------------------------	-	
	self.moviendo_obj = false
	self.ultima_pos = vmath.vector3()
	self.delta_pos = vmath.vector3()
	self.casilla_delta = ""
	self.casilla_delta2 = ""
	
	self.ultima_casilla = 1
	self.pos_casilla = vmath.vector3()
	self.mouse_sobre_casillas = false -- Registra si el mouse está sobre un casillero.
	self.ultimo_obj_clickeado = nil
	-- nodos -----------------------------------------
	self.casilla = gui.get_node("casilla") -- casilla vacía
	self.cruz = gui.get_node("cruz")
	gui.set_enabled(self.cruz, false)
	self.objetivo = gui.get_node("objetivo")
	self.obstaculo = gui.get_node("obstaculo")
	self.barrera = gui.get_node("barrera")
	self.laser_en_barrera = false
	self.switch = gui.get_node("switch")
	-- laser beam -----------------------------------------
	self.laser_beam = gui.get_node("laser_beam")
	gui.is_enabled(self.laser_beam, false)
	self.position = gui.get_position(self.laser_beam )
	self.target_position = gui.get_position(self.laser_beam )
	self.scale = gui.get_scale(self.laser_beam )
	self.play_stop = gui.get_node("play_stop")
	self.laser_prendido = false
	-- clonacion de beams
	self.laser_tabla = {}
	
	
	-- obj toolbar
	self.espejo = gui.get_node("espejo")
	self.espejo_doble = gui.get_node("espejo_doble")
	self.ui_objetos = false

	-- tablas -----------------------------------------
	self.casillas = {}
	self.casillas["obj_fisico"] = nil
	self.espejos = {}
	---------------------------------------------------
	
	self.obj_seleccionado = ""

	msg.post("", "acquire_input_focus")

	---------------------------------------------------
	self.pos = vmath.vector3(440,648,0) -- posicion inicial para crear la grilla
	for i = 1, niveles[self.nivel]["cuanto_por_cuanto"] do
		for i = 1, niveles[self.nivel]["cuanto_por_cuanto"] do
			--print(niveles[tostring(self.nivel)][self.contador_para_leer_mapa_nivel])
			local constatador = niveles[tostring(self.nivel)][self.contador_para_leer_mapa_nivel]
			local ocupado = false
			--print(niveles["1"][self.contador_para_leer_mapa_nivel])
			if constatador == 2 then -- Coloca el objetivo en lugar
				-- Y esto debería enviar un mensaje para crear un objeto fisico del "objetivo"
				gui.set_position(self.objetivo, self.pos)
				gui.set_position(self.barrera, self.pos)
				msg.post("/objetivo", "mover_posicion", {pos = self.pos})
				msg.post("barrera", "mover_posicion", {pos = self.pos})
				ocupado = true
			elseif constatador == 1 then -- Coloca obstáculos
				msg.post("/obstaculo_factory_obj#obstaculo_factory_scr", "crear_obstaculo", {pos = self.pos})
				ocupado = true
				clonar_nodo(self, self.obstaculo, hash("obstaculo"), self.pos, {}, false)
			elseif constatador == 3 then -- Coloca switches
				
				ocupado = true
				local nuevo_switch = clonar_nodo(self, self.switch, hash("switch"), self.pos, {}, false)
				table.insert(datos.switches, nuevo_switch)
				--pprint(datos.switches)
				msg.post("/switches#switchfactory", "crear_switch", {pos = self.pos, nodo = tostring(nuevo_switch)})
			end
			local nueva_casilla = gui.clone_tree(self.casilla)
			local clon_casilla = nueva_casilla[hash("casilla")]
			gui.set_position(clon_casilla, self.pos)
			self.pos.x = self.pos.x + dif_entre_casillas
			table.insert(self.casillas, {nueva_casilla, ocupado = ocupado})
			self.contador_para_leer_mapa_nivel = self.contador_para_leer_mapa_nivel + 1

		end
		self.pos.x = 440
		self.pos.y = self.pos.y - dif_entre_casillas
	end
	
	self.contador_para_leer_mapa_nivel = 1
	gui.set_enabled(self.casilla, false) -- ver que esto no haga bardo dsp
	---------------------------------------------------
end

--function update(self, dt)

--end

function on_message(self, message_id, message, sender)
	--pprint(message_id)
	if message_id == hash("obj_seleccionado") then
		self.obj_seleccionado = message.objeto
		--(self.obj_seleccionado .. " <from> guiscript")
	elseif message_id == hash("dibujar_laser") then
		--print("dibujar laser")
		local sender_pos = message.pos_inicial_laser
		local nuevo_laser_beam = clonar_nodo(self, self.laser_beam, hash("laser_beam"), sender_pos, self.laser_tabla, false)
		--pprint(message)
		if message.datos then
			--pprint(message)
			msg.post("", "release_input_focus")
			local distance = dist2d(message.pos_inicial_laser.x, message.pos_inicial_laser.y, message.datos.position.x, message.datos.position.y)
			self.scale.x = distance

				gui.animate(nuevo_laser_beam, "scale.x", self.scale, gui.EASING_LINEAR, 0.5, 0,
				function()
					msg.post("", "acquire_input_focus")
					msg.post(message.datos.id, "disparar_ray")
				end)

			local direction = angle_of_vector_between_two_points(message.pos_inicial_laser.x, message.pos_inicial_laser.y, message.datos.position.x, message.datos.position.y)
			local rotation = vmath.quat_rotation_z(direction)
			gui.set_rotation(nuevo_laser_beam, rotation)
		else
			msg.post("", "release_input_focus")
			local distance = dist2d(message.pos_inicial_laser.x, message.pos_inicial_laser.y, 1000, self.position.y)
			self.scale.x = distance
			gui.animate(nuevo_laser_beam, "scale.x", self.scale, gui.EASING_LINEAR, 0.25, 0,
			function()
				msg.post("", "acquire_input_focus")
			end)
			local direction = angle_of_vector_between_two_points(message.pos_inicial_laser.x, message.pos_inicial_laser.y, 1000, message.pos_inicial_laser.y)
			local rotation = vmath.quat_rotation_z(direction)
			gui.set_rotation(nuevo_laser_beam, rotation)
			
		end
	elseif message_id == hash("borrar_laser") then
		for i = table.maxn(self.laser_tabla), 1, -1 do
			-- elimina los laser
			gui.delete_node(self.laser_tabla[i][hash("laser_beam")])
			table.remove(self.laser_tabla, i)
		end
		gui.play_flipbook(self.play_stop, "boton_play")
		gui.play_flipbook(self.objetivo, "objetivo_off") -- Esto después puede que haya que sacarlo, en teoría terminaría el nivel acá.
		gui.animate(self.objetivo, "scale", 1, gui.EASING_LINEAR, 0)
	elseif message_id == hash("accion_ui_obj") then

		msg.post("", "release_input_focus")
		if message.accion == "derecha" then
			local rot = gui.get_rotation(self.ultimo_obj_clickeado)
			gui.animate(self.ultimo_obj_clickeado, "rotation.z", rot.z - 90, gui.EASING_INBACK, 0.5, 0,
			function()

				msg.post(self.casillas[self.ultima_casilla][10], "accion_gui", {accion= "rot_der", valor = -1})
				msg.post("/ui_objetos#ui_objetos", "restablecer_input")
				msg.post("", "acquire_input_focus")
	
			end	)
		elseif message.accion == "izquierda" then
			local rot = gui.get_rotation(self.ultimo_obj_clickeado)
			gui.animate(self.ultimo_obj_clickeado, "rotation.z", rot.z + 90, gui.EASING_INBACK, 0.5, 0,
			function()

				msg.post(self.casillas[self.ultima_casilla][10], "accion_gui", {accion= "rot_izq", valor = 1})
				msg.post("/ui_objetos#ui_objetos", "restablecer_input")
				msg.post("", "acquire_input_focus")
			end	)
		elseif message.accion == "aceptar" then
			self.ui_objetos = false
			msg.post("", "acquire_input_focus")

		elseif message.accion == "borrar_objeto" then
			for i = table.maxn(self.espejos), 1, -1 do
				if self.ultimo_obj_clickeado == self.espejos[i][hash("espejo")] then
					-- borra nodo espejo
					gui.delete_node(self.espejos[i][hash("espejo")])
					table.remove(self.espejos, i)

					for k, v in pairs(self.casillas) do
						-- desocupa la casilla y borra obj físico
						if tostring(self.casillas[k][1][hash("casilla")]) == tostring(self.ultimo_obj_clickeado) then
							self.casillas[k]["ocupado"] = false
							msg.post(self.casillas[self.ultima_casilla][10], "borrar_obj")
							self.casillas[self.ultima_casilla][10] = nil -- esta pos de table es la instancia del objeto físico.
							
						end
					end
				end
			end
			self.ui_objetos = false
			msg.post("", "acquire_input_focus")
		end
			
	elseif message_id == hash("guardar_obj_fisico") then
		--print(message)
		--print(self.ultimo_obj_clickeado)
		-- cambiar casillas por espejos
		--pprint(self.espejos)
		table.insert(self.casillas[self.ultima_casilla], 10, message.obj)
	elseif message_id == hash("objetivo_encontrado") then
		gui.move_above(self.objetivo, self.laser)
		gui.play_flipbook(self.objetivo, "objetivo_on")
		local pos = gui.get_position(self.objetivo)
		pos.x = pos.x +10
		gui.animate(self.objetivo, "scale",1.1, gui.EASING_INCIRC, 3, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
		print("Objetivo encontrado - nivel superado")
	elseif message_id == hash("switch_encontrado") then
		--pprint(datos.switches)
		for i = 1, table.maxn(datos.switches) do
			if message.nodo_switch == tostring(datos.switches[i]) then
				gui.animate(datos.switches[i], "color", vmath.vector4(0,0.5,0.5,1), gui.EASING_INBACK, 0.15,0.20)
				--gui.move_above(datos.switches[i], self.laser_beam) -- No se porque no funciona esto
				switch_activado(self)
			end
		end
	elseif message_id == hash("laser_en_barrera") then
		self.laser_en_barrera = true -- chquea si llego el laser a la barrera antes de activar todos los switches
	end

end

function on_input(self, action_id, action)
	 --esto hay que cambuiar dsp a rotar objs
	if action_id == hash("touch") and action.pressed then
		for _,casillero in pairs(self.espejos) do -- Repasa la tabla de self.espejos
			if gui.pick_node(casillero[("espejo")], action.x, action.y) then
				self.ui_objetos = true
				-- arreglar que instancia fisica rota
				--msg.post("", "release_input_focus")
				--pprint(self.espejos)
				self.ultimo_obj_clickeado = casillero[("espejo")]
				-- esta parta kv es para girar las instancias fisicas
				for k, v in pairs(self.casillas) do
					if tostring(v[1][hash("casilla")]) == tostring(self.ultimo_obj_clickeado) then
						--print("iguales")
						--print(k, v)
						self.ultima_casilla = k
						print(self.ultima_casilla)
					end
					
					--print(v[1][hash("casilla")])
				end
				--print(self.ultima_casilla)
				
				local pos_obj = gui.get_position(self.ultimo_obj_clickeado)
				local obj = self.ultimo_obj_clickeado
				--print("enviando mensaje al ui")
				msg.post("/ui_objetos#ui_objetos", "activar_ui_objetos", {pos = pos_obj, obj = tostring(obj)})
				self.delta_pos = pos_obj
				self.moviendo_obj = true
				datos.obj_en_mouse = self.ultimo_obj_clickeado
				
				for k, v in pairs(self.casillas) do
					-- desocupa la casilla y borra obj físico
					if tostring(self.casillas[k][1][hash("casilla")]) == tostring(self.ultimo_obj_clickeado) then
						self.casillas[k]["ocupado"] = false
						print("guardando casilla delta")
						self.casilla_delta = k
						--msg.post(self.casillas[self.ultima_casilla][10], "borrar_obj")
						--self.casillas[self.ultima_casilla][10] = nil -- esta pos de table es la instancia del objeto físico.

					end
				end
			end
		end
	end	

	
	if action_id == hash("touch") then -- crea objetos y los reja en una casilla o elimina, drag and drop.
		
		if action.pressed then
			if gui.pick_node(self.espejo, action.x, action.y) then
				--crear espejo para poner
					self.ultimo_obj_clickeado = nil
					self.ultimo_nodo_creado = clonar_nodo(self, self.espejo, hash("espejo"), vmath.vector3(action.x, action.y, 0), self.espejos, true)
					self.ultimo_obj_clickeado = self.ultimo_nodo_creado
					self.moviendo_obj = false
			elseif gui.pick_node(self.espejo_doble, action.x, action.y) then
					self.ultimo_obj_clickeado = nil
					self.ultimo_nodo_creado = clonar_nodo(self, self.espejo, hash("espejo"), vmath.vector3(action.x, action.y, 0), self.espejos, true)
					gui.play_flipbook(self.ultimo_nodo_creado, "espejo_doble")
					self.ultimo_obj_clickeado = self.ultimo_nodo_creado
					self.moviendo_obj = false
			elseif gui.pick_node(self.play_stop, action.x, action.y) then -- Enciende y apaga el laser.
				if self.ui_objetos == false then -- play stop
					gui.play_flipbook(self.play_stop, "boton_stop")
					msg.post("/laser#laser", "disparar_ray_cast")
					self.cantidad_de_switches_activados = 0
					self.laser_en_barrera = false
					gui.set_enabled(self.barrera, true)
					msg.post("/barrera#barrera", "activar_barrera")
					for i = 1, table.maxn(datos.switches) do
						gui.animate(datos.switches[i], "color", vmath.vector4(0.8,0.17,0.17,1), gui.EASING_INBACK, 0.15)
					end
				end
			end	
		elseif action.released then
			if self.mouse_sobre_casillas == false and datos.obj_en_mouse ~= nil and self.moviendo_obj == false then
				-- Suelta y elimina el objeto si se soltó por fuera de una casilla y libera "obj_en_mouse".
				-- Acá se puede chequear si que pasa si se suelta sobre otro nodo o casilla ya ocupada.
				
					for i = table.maxn(self.espejos), 1, -1 do
						if datos.obj_en_mouse == self.espejos[i][hash("espejo")] then
							gui.delete_node(self.espejos[i][hash("espejo")])
							table.remove(self.espejos, i)
							print("borrando nodo 1")
							--datos.obj_en_mouse = nil
							if self.moviendo_obj == true then
								msg.post(self.casillas[self.casilla_delta][10], "borrar_obj")
								self.casillas[self.casilla_delta][10] = nil -- esta pos de table es la instancia del objeto físico.
								
							end
						end
					end
					datos.obj_en_mouse = nil
					self.moviendo_obj = false
					
			elseif self.casillas[self.ultima_casilla]["ocupado"] == true and datos.obj_en_mouse ~= nil then
				-- Suelta el objeto dejándolo en una casilla, la función de abajo se encarga de esto. Libera "obj_en_mouse".
					print("No podés dejar el obj en la casillero (" .. self.ultima_casilla .. ") " .. tostring(self.casillas[self.ultima_casilla ]["ocupado"]))
					for i = table.maxn(self.espejos), 1, -1 do
						--pprint(self.espejos[i])
						if self.ultimo_obj_clickeado == self.espejos[i][hash("espejo")] and self.moviendo_obj == false then	
							gui.delete_node(self.espejos[i][hash("espejo")])
							table.remove(self.espejos, i)
							print("borrando nodo 2") --??
						elseif self.ultimo_obj_clickeado == self.espejos[i][hash("espejo")] and self.moviendo_obj == true then
							for k, v in pairs(self.espejos) do --?? no es necesario el loop creo
								gui.set_position(self.ultimo_obj_clickeado, self.delta_pos)
							end
							for k, v in pairs(self.casillas) do
								-- ocupa la casilla y borra obj físico
								if tostring(self.casillas[k][1][hash("casilla")]) == tostring(self.ultimo_obj_clickeado) then
									self.casillas[k]["ocupado"] = true
								end
							end
							for k, v in pairs(self.casillas) do
								if tostring(v[1][hash("casilla")]) == tostring(self.ultimo_obj_clickeado) then
									self.ultima_casilla = k
									--pprint(v)
								end

							end
							print("restablecer pos")
							
						end
					end	
					datos.obj_en_mouse = nil
					self.moviendo_obj = false
					
				elseif self.casillas[self.ultima_casilla]["ocupado"] == false and datos.obj_en_mouse ~= nil then
					datos.obj_en_mouse = nil
					self.casillas[self.ultima_casilla]["ocupado"] = true

					--self.ultimo_obj_clickeado = self.ultimo_nodo_creado -- esto?
					-- crear physics obj
					
					if gui.get_flipbook(self.ultimo_nodo_creado) == hash("espejo") and self.moviendo_obj == false then
						msg.post("/espejos#espejosfactory", "crear_physics_obj",{x = self.pos_casilla.x , y = self.pos_casilla.y})
					elseif gui.get_flipbook(self.ultimo_nodo_creado) == hash("espejo_doble") and self.moviendo_obj == false then
						msg.post("/espejos_dobles#espejosdoblesfactory", "crear_physics_obj",{x = self.pos_casilla.x , y = self.pos_casilla.y})
					elseif self.moviendo_obj == true then
						--print(self.ultima_casilla)
						
						if self.casilla_delta ~= self.ultima_casilla and self.mouse_sobre_casillas == true then
							print(self.casillas[self.casilla_delta][10])
							self.casillas[self.ultima_casilla][10] = self.casillas[self.casilla_delta][10]
							msg.post(self.casillas[self.ultima_casilla][10], "mover_obj", {pos = self.pos_casilla})	
							self.casillas[self.casilla_delta][10] = nil 
							print("mover obj fisico // gui")
						elseif self.mouse_sobre_casillas == false then
							print("restablecer pos desde afuera")
							gui.set_position(self.ultimo_obj_clickeado, self.delta_pos)
							self.casillas[self.ultima_casilla]["ocupado"] = false
						end
					end
					self.moviendo_obj = false
					print("Colocando obj en casillero número (" .. self.ultima_casilla .. ") " .. tostring(self.casillas[self.ultima_casilla ]["ocupado"]))
				end
				gui.set_enabled(self.cruz, false)
				datos.obj_en_mouse = nil
			end
			
	end
	
	if action_id == nil then
		datos.pos_del_mouse.x = action.x -- Guarda la pos del mouse en movimiento.
		datos.pos_del_mouse.y = action.y
		
		for _,casillero in pairs(self.casillas) do -- Repasa la tabla de self.casillas
			
			if gui.pick_node(casillero[1][("casilla")], action.x, action.y) then
				self.mouse_sobre_casillas = true
				if datos.obj_en_mouse ~= nil then
					-- Si el mouse tiene un objeto y está sobre una casilla guarda la posición de esa casilla.
					-- Además pone al obj_en_mouse en esa posición.
					-- Así cuando el touch es released y se está sobre una casilla el objeto queda en esa posición.

					self.pos_casilla = gui.get_position(casillero[1][("casilla")])
					
					gui.set_position(datos.obj_en_mouse, self.pos_casilla)
					self.ultima_casilla = _
					--print(self.ultima_casilla)
					if self.casillas[self.ultima_casilla]["ocupado"] == true then
						--print("esta casilla está ocupada")
						if casillero[self.ultima_casilla] ~= nil then
							-- Esto no termino de entender porque hace erroe si no hago este chequeo pero parece arreglar el problema.
							gui.move_above(self.cruz, casillero[self.ultima_casilla][1])
						else
							gui.move_above(self.cruz, casillero[self.ultima_casilla])
						end
						gui.set_enabled(self.cruz, true)
						gui.set_position(self.cruz, self.pos_casilla)
						
						
					else
						gui.set_enabled(self.cruz, false)
					end

					--pprint(casillero[1]["casilla"] )--.. casillero["ocupado"])
					--print(self.ultima_casilla)

					
				end
				--[[
				if self.casilla_delta ~= self.ultima_casilla then
					self.casilla_delta2 = self.casilla_delta
					self.casilla_delta = self.ultima_casilla
				end
				]]


				
				--if self.ultima_pos ~= self.pos_casilla then
					--self.delta_pos = self.ultima_pos
					--self.ultima_pos = self.pos_casilla
					--print(self.delta_pos)
					--print(self.ultima_pos)
				--end
				
				return -- Tope para que el mouse sobre cailla y el código de arriba funcione.
			end
			self.mouse_sobre_casillas = false -- resetea el mouse sobre casillas para que no se cuelgue.
			gui.set_enabled(self.cruz, false)
		end
		if datos.obj_en_mouse ~= nil then
			-- Esto hace que el objeto en mouse siga al mouse cuando no está sobre una casilla.
			gui.set_position(datos.obj_en_mouse, datos.pos_del_mouse)
		end
	end
	

	if action_id == hash("fisicas") and action.pressed then
		if datos.dibujar_linea == false then
			datos.dibujar_linea = true
		else
			datos.dibujar_linea = false
		end
		msg.post("@system:", "toggle_physics_debug")
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
