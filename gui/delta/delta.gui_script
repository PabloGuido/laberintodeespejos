local tuto = require("escenas.tutoriales.tutoriales")
local datos = require("main.datos")
--print(tuto["1"][4])

local function animaciones_delta(self)
	if datos.jugar_nivel == 1 and self.cuenta == 5 then
		gui.play_spine_anim(self.delta, "idle_1_apunta_arriba", gui.PLAYBACK_ONCE_FORWARD)
	elseif datos.jugar_nivel == 1 and self.cuenta == 9 then
		gui.play_spine_anim(self.delta, "idle_1_apunta_arriba", gui.PLAYBACK_ONCE_BACKWARD)
	elseif datos.jugar_nivel == 1 and self.cuenta == 3 then
		gui.play_spine_anim(self.delta, "idle_1", gui.PLAYBACK_ONCE_FORWARD)
	end

end

local function animaciones(self)
	if self.que_animacion_reproducir == "mover espejo" then
		gui.set_enabled(self.espejo, true)
		self.nodo_anim = self.espejo
		self.nodo_prop = "position"
		local espejo_pos_inicial = vmath.vector3(155,600,0)
		self.animacion_en_reproduccion = gui.animate(self.nodo_anim, self.nodo_prop, vmath.vector3(684,234,0), gui.EASING_OUTCUBIC, 2, 0, nil, gui.PLAYBACK_LOOP_FORWARD)
	elseif self.que_animacion_reproducir == "mover espejo 2" then
		gui.set_enabled(self.adorno, true)
		gui.set_enabled(self.espejo, true)
		self.nodo_anim = self.espejo
		self.nodo_prop = "position"
		gui.set_position(self.espejo, vmath.vector3(684,234,0))
		gui.set_position(self.adorno, vmath.vector3(684,234,0))
		msg.post("/espejo_relevo", "mover_relevo_tutorial", {pos = vmath.vector3(684,234,0)})
	elseif self.que_animacion_reproducir == "rotar espejo" then
		gui.set_enabled(self.ui_objeto, true)
		gui.set_enabled(self.espejo, true)
		gui.set_position(self.espejo, vmath.vector3(684,234,0))
		self.nodo_anim = self.espejo
		gui.set_rotation(self.nodo_anim, vmath.vector3(0,0,0))
		self.nodo_prop = "rotation.z"
		msg.post("/espejo_relevo", "mover_relevo_tutorial", {pos = vmath.vector3(684,234,0)})
		msg.post("/espejo_relevo", "rotar_relevo_tutorial", {rot = 0}) -- reiniciar este valor cuando va a arrancar el juego.
		self.animacion_en_reproduccion = gui.animate(self.nodo_anim, self.nodo_prop, 90, gui.EASING_INBACK, 1, 0,
		function()
			msg.post("/espejo_relevo", "rotar_relevo_tutorial", {rot = 90})
			self.timer = timer.delay(1, false, animaciones)
			
		end)
	elseif self.que_animacion_reproducir == "rotar espejo 2" then
		gui.set_enabled(self.ui_objeto, true)
		gui.set_enabled(self.espejo, true)
		gui.set_position(self.espejo, vmath.vector3(684,234,0))
		self.nodo_anim = self.espejo
		gui.set_rotation(self.nodo_anim, vmath.vector3(0,0,90))
		self.nodo_prop = "rotation.z"
		msg.post("/espejo_relevo", "mover_relevo_tutorial", {pos = vmath.vector3(684,234,0)})
		msg.post("/espejo_relevo", "rotar_relevo_tutorial", {rot = 90}) 
	end

end
local function respiracion(self)
	local pos = gui.get_position(self.delta)
	gui.animate(self.delta, "position.y", pos.y + 10, gui.EASING_LINEAR, 5, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
end
local function tutorial(self)
	gui.set_color(self.caja, vmath.vector4(1,1,1,0.85))
	gui.set_text(self.text, tuto[self.nivel][self.cuenta])
	gui.set_color(self.text, vmath.vector4(1,1,1,0))
	--gui.animate(self.siguiente, "color.w", 0.8, gui.EASING_LINEAR, 0)
	gui.set_color(self.siguiente, vmath.vector4(1,1,1,0.85))
	gui.animate(self.text, "color.w", 1, gui.EASING_LINEAR, 1)
	sound.play(tuto[self.nivel ]["sonido_" .. self.cuenta], {gain = datos.gain_sfx, speed = 1},
	function()
	--		self.cuenta = self.cuenta + 1
	--		msg.post("", "acquire_input_focus")
	--		gui.animate(self.siguiente, "color.w", 1, gui.EASING_LINEAR, 1.5, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
		end)
	
	
	if self.nodo_anim ~= nil then
		gui.cancel_animation(self.nodo_anim, self.nodo_prop)
		gui.set_enabled(self.nodo_anim, false)
		self.nodo_anim = nil
		self.nodo_prop = nil
		if self.timer ~= nil then
			timer.cancel(self.timer)
			self.timer = nil
		end
	end

	if tuto["1"]["animacion_" .. self.cuenta ] ~= nil then
		print(tuto["1"]["animacion_" .. self.cuenta ])
		self.que_animacion_reproducir = tuto["1"]["animacion_" .. self.cuenta ]
		animaciones(self)
	end
	animaciones_delta(self)
end
function init(self)
	-- animables --
	self.nodo_anim = nil
	self.nodo_prop = nil
	self.timer = nil
	self.que_animacion_reproducir = ""
	self.espejo = gui.get_node("espejo")
	gui.set_enabled(self.espejo, false)
	
	self.ui_objeto = gui.get_node("ui_objeto")
	gui.set_enabled(self.ui_objeto, false)
	
	self.adorno = gui.get_node("adorno")
	gui.animate(self.adorno, "rotation.z", 360, gui.EASING_LINEAR, 25, 0, nil, gui.PLAYBACK_LOOP_FORWARD)
	gui.set_enabled(self.adorno, false)
	---------------
	self.nivel = tostring(datos.jugar_nivel)
	self.cuenta = 1
	self.tutorial_finalizado = false
	gui.set_render_order(10)
	self.caja = gui.get_node("caja")
	gui.set_color(self.caja, vmath.vector4(1,1,1,0))
	self.text = gui.get_node("text")
	gui.set_color(self.text, vmath.vector4(1,1,1,0))
	self.siguiente = gui.get_node("siguiente")
	gui.set_color(self.siguiente, vmath.vector4(1,1,1,0))
	self.delta = gui.get_node("delta")
	if datos.jugar_nivel == 1 then
		gui.play_spine_anim(self.delta, "saludo", gui.PLAYBACK_LOOP_PINGPONG)
	end
	gui.animate(self.delta, "position.y", -148, gui.EASING_OUTCUBIC, 1, 0,
	function()
		respiracion(self)
		local nivel = tostring(datos.jugar_nivel)
			print(tuto[nivel]["hacer_tuto"])
			if tuto[nivel]["hacer_tuto"] == true then -- chequea si hay que hacer tutorial en el nivel o decir algo al comienzo
				print("hacer tutorial " .. nivel)
				tutorial(self)
			else
				msg.post("/gui#gui", "tomar_input")
			end
		end)

	--gui.animate(self.siguiente, "color.w", 0.5, gui.EASING_LINEAR, 1, 0,
	--function()
	--	gui.animate(self.siguiente, "color.w", 1, gui.EASING_LINEAR, 1.5, 1, nil, gui.PLAYBACK_LOOP_PINGPONG)
	---end)
	
	local function input_inicial ()
		msg.post("", "acquire_input_focus") 
	end
	timer.delay(1.5, false, input_inicial)
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("nivel_superado") then
		gui.set_spine_skin(self.delta, "cara sonrisa")
		gui.play_spine_anim(self.delta, "victoria", gui.PLAYBACK_ONCE_FORWARD, {},
		function()
			sound.play("/sonidos#victoria", {gain = datos.gain_sfx})
			gui.set_spine_skin(self.delta, "cara sonrisa")
			gui.play_spine_anim(self.delta, "victoria2", gui.PLAYBACK_LOOP_PINGPONG)
		end)
	elseif message_id == hash("finalizar_escena") then
		print("salir")
		--gui.animate(self.delta, "position.y", -300, easing, duration)
		gui.animate(self.delta, "position.y", -417, gui.EASING_INBACK, 1)
	end
end

function on_input(self, action_id, action)

	if action_id == hash("touch") and action.pressed then
		sound.stop(tuto[self.nivel ]["sonido_" .. self.cuenta])
		self.cuenta = self.cuenta + 1
		if tuto[self.nivel][self.cuenta] ~= nil then
			--msg.post("", "release_input_focus")
			tutorial(self)
		else
			msg.post("", "release_input_focus") -- esto lo deber√≠a arreglar
			gui.animate(self.text, "color.w", 0, gui.EASING_LINEAR, 1)
			gui.animate(self.siguiente, "color.w", 0, gui.EASING_LINEAR, 1)
			gui.animate(self.caja, "color.w", 0, gui.EASING_LINEAR, 1, 0,
			function()
				gui.set_enabled(self.caja, false)
				gui.set_enabled(self.text, false)
				self.tutorial_finalizado = true
				print("fin de tutorial, mandar input al gui gameplay")
				-- Restaruar valores que sean necesarios.
				msg.post("/espejo_relevo", "rotar_relevo_tutorial", {rot = 0})
				msg.post("/espejo_relevo", "mover_relevo_tutorial", {pos = vmath.vector3(0,0,0)})
				gui.set_enabled(self.adorno, false)
				gui.set_enabled(self.ui_objeto, false)
				if self.nodo_anim ~= nil then
					gui.cancel_animation(self.nodo_anim, self.nodo_prop)
					gui.set_enabled(self.nodo_anim, false)
					self.nodo_anim = nil
					self.nodo_prop = nil
					if self.timer ~= nil then
						timer.cancel(self.timer)
						self.timer = nil
					end
				end
				msg.post("/gui#gui", "tomar_input")
			end)
		end
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
