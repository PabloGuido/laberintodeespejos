local datos = require("main.datos")
local niveles = require("gui.niveles")
local max_lvl = 15

local function abrir_candado(self)
	local boton_ac = self.tabla_de_botones[datos.ultimo_nivel_desbloqueado]
	if niveles[datos.ultimo_nivel_desbloqueado]["habilitado"] ~= nil then
		if niveles[datos.ultimo_nivel_desbloqueado]["habilitado"]  == false then
			gui.animate(boton_ac[hash("aro")], "rotation.z", 20, gui.EASING_INBOUNCE, 0.75, 0.25)
			sound.play("#candado_abierto", {gain = datos.gain_sfx, delay = 0.25})
			gui.animate(boton_ac[hash("cuerpo")], "rotation.z", -10, gui.EASING_INBOUNCE, 0.75, 0.25,
			function()
				gui.animate(boton_ac[hash("aro")], "color", vmath.vector4(1,1,1,0), gui.EASING_LINEAR, 0.35)
				gui.animate(boton_ac[hash("cuerpo")], "color", vmath.vector4(1,1,1,0), gui.EASING_LINEAR, 0.35, 0,
				function()
					gui.set_enabled(boton_ac[hash("aro")], false)
					gui.set_enabled(boton_ac[hash("cuerpo")], false)
					sound.play("#nivel_desbloqueado", {gain = datos.gain_sfx})
					gui.set_enabled(boton_ac[hash("numero_de_nivel")], true)
					niveles[datos.ultimo_nivel_desbloqueado]["habilitado"] = true
					msg.post("", "acquire_input_focus")
				end)
			end)
		else
			msg.post("", "acquire_input_focus")
		end
	end
end

local function desbloquear_niveles(self)
	for k, boton in pairs(self.tabla_de_botones) do
		--pprint(niveles[k])
		if niveles[k]["habilitado"] == true then
			gui.set_enabled(boton[hash("aro")], false)
			gui.set_enabled(boton[hash("cuerpo")], false)
			gui.set_enabled(boton[hash("numero_de_nivel")], true)
			if niveles[k]["superado"] == true then
				gui.set_enabled(boton[hash("estrella")], true)
			end
		end
	end
end

local function primera_vez_de_seleccion_de_pantalla(self)
	
		gui.set_enabled(self.pantalla_negra, true)
		gui.set_position(self.pantalla_negra, self.pos_pantalla_negra_primera_vez)
		gui.animate(self.pantalla_negra, "color", vmath.vector4(1,1,1,1), gui.EASING_OUTCUBIC, 1.5, 0,
		function()
			for k, boton in pairs(self.tabla_de_botones) do
				if k == 1 then
					gui.animate(boton[hash("aro")], "rotation.z", 20, gui.EASING_INBOUNCE, 0.75, 0.25)
					sound.play("#candado_abierto", {gain = datos.gain_sfx, delay = 0.25})
					gui.animate(boton[hash("cuerpo")], "rotation.z", -10, gui.EASING_INBOUNCE, 0.75, 0.25,
					function()
						gui.animate(boton[hash("aro")], "color", vmath.vector4(1,1,1,0), gui.EASING_LINEAR, 0.35)
						gui.animate(boton[hash("cuerpo")], "color", vmath.vector4(1,1,1,0), gui.EASING_LINEAR, 0.35, 0,
						function()
							gui.set_enabled(boton[hash("aro")], false)
							gui.set_enabled(boton[hash("cuerpo")], false)
							sound.play("#nivel_desbloqueado", {gain = datos.gain_sfx})
							gui.set_enabled(boton[hash("numero_de_nivel")], true)
							gui.animate(self.pantalla_negra, "color", vmath.vector4(1,1,1,0), gui.EASING_OUTCUBIC, 1, 0,
							function()
								gui.set_enabled(self.pantalla_negra, false)
								msg.post("", "acquire_input_focus")
							end)
						end)
					end)
				end
			end	
		end)
end

function init(self)
	self.boton_volver = gui.get_node("boton_volver")
	self.cuadro_azul = gui.get_node("cuadro_azul")
	self.boton_celeste = gui.get_node("boton_celeste")
	self.aro = gui.get_node("aro")
	self.cuerpo = gui.get_node("cuerpo")
	self.numero_de_nivel = gui.get_node("numero_de_nivel")
	self.estrella = gui.get_node("estrella")
	self.pantalla_negra = gui.get_node("pantalla_negra")
	gui.set_color(self.pantalla_negra, vmath.vector4(1,1,1,0))
	gui.set_enabled(self.pantalla_negra, false)

	self.sonido_nodo = gui.get_node("sonido")
	if datos.sonido == false then
		gui.play_flipbook(self.sonido_nodo, "sonido off")
	end
	
	self.tabla_de_botones = {}
	self.pos_inicial_botones = vmath.vector3(-400, 120, 0)
	self.pos_pantalla_negra_primera_vez = vmath.vector3(241, 380, 0)
	self.dif_entre_botones = 200
	self.dif_de_bajada = 175
	self.numero_para_texto = 1
	
	
	for i = 1, 3 do
		for i = 1, 5 do
			local nuevo_nodo = gui.clone_tree(self.boton_celeste)
			local ncel = nuevo_nodo[hash("boton_celeste")]
			table.insert(self.tabla_de_botones, nuevo_nodo)
			gui.set_text(nuevo_nodo[hash("numero_de_nivel")], self.numero_para_texto)
			gui.set_enabled(nuevo_nodo[hash("numero_de_nivel")], false)
			gui.set_enabled(nuevo_nodo[hash("estrella")], false)
			gui.set_parent(nuevo_nodo[hash("boton_celeste")], self.cuadro_azul, true)
			gui.set_position(ncel, self.pos_inicial_botones)
			self.pos_inicial_botones.x = self.pos_inicial_botones.x + self.dif_entre_botones
			if self.numero_para_texto == 1 then -- acomoda el "1"
					local numero_pos = gui.get_position(nuevo_nodo[hash("numero_de_nivel")])
					numero_pos.x = numero_pos.x - 6
					gui.set_position(nuevo_nodo[hash("numero_de_nivel")], numero_pos)
			end
			self.numero_para_texto = self.numero_para_texto + 1
		end
		self.pos_inicial_botones = vmath.vector3(-400, 120, 0)
		if i == 3 then 
			self.pos_inicial_botones = vmath.vector3(-400, 120, 0)
		elseif i == 2 then
			self.pos_inicial_botones = vmath.vector3(-400, -55, 0)
		end
		self.pos_inicial_botones.y = self.pos_inicial_botones.y - self.dif_de_bajada
	end

	if datos.primera_vez_que_abre_gameplay == false then
		desbloquear_niveles(self)
	end

	--pprint(self.tabla_botones)
	gui.set_enabled(self.boton_celeste, false)
	gui.animate(self.boton_volver, "position.y", 656, gui.EASING_OUTCUBIC, 1)
	sound.play("/go#seleccion_1", {gain = datos.gain_sfx})
	gui.animate(self.cuadro_azul, "position.x", 640, gui.EASING_OUTCUBIC, 1, 0,
	function()
		
		if datos.primera_vez_que_abre_gameplay == true then
			primera_vez_de_seleccion_de_pantalla(self)
		elseif datos.primera_vez_que_abre_gameplay == false then
			if datos.jugar_nivel == datos.ultimo_nivel_desbloqueado and datos.ultima_escena ~= "#pantalla_inicial" and datos.ultimo_nivel_desbloqueado <= max_lvl then
				abrir_candado(self)
			else
				msg.post("", "acquire_input_focus") -- ?
			end
		end
	end)
end


function on_input(self, action_id, action)
	if action_id == hash("touch") and action.pressed then
		for k, boton in pairs(self.tabla_de_botones) do
			if gui.pick_node(boton[hash("boton_celeste")], action.x, action.y) then	
				datos.animar_click(self, boton[hash("boton_celeste")])
				print("Nivel " .. k .. " habilitado: " .. tostring(niveles[k]["habilitado"]))
				if niveles[k]["habilitado"] == true then
					sound.play("/go#numero_de_nivel", {gain = datos.gain_sfx})
					datos.jugar_nivel = k
					msg.post("", "release_input_focus")
					gui.animate(self.boton_volver, "color", vmath.vector4(1,1,1,0), gui.EASING_LINEAR, 0.65)
					gui.animate(self.cuadro_azul, "color", vmath.vector4(1,1,1,0), gui.EASING_LINEAR, 0.65, 0,
					function()
						msg.post("loader:/loader#loader", "avanzar_escena")
					end)
				else
					sound.play("#candado_cerrado", {gain = datos.gain_sfx})
				end	
			end
		end
		
		if gui.pick_node(self.boton_volver, action.x, action.y) then
			sound.play("/go#sonido_volver", {gain = datos.gain_sfx})
			datos.animar_click(self, self.boton_volver)
			
			msg.post("", "release_input_focus")
			gui.animate(self.cuadro_azul, "position.x", 1790, gui.EASING_INBACK, 1)
			gui.animate(self.boton_volver, "position.y", 867, gui.EASING_INBACK, 1, 0,
			function()
				msg.post("loader:/loader#loader", "retroceder_escena")
			end)
		elseif gui.pick_node(self.sonido_nodo, action.x, action.y) then
			datos.animar_click(self, self.sonido_nodo, 0.6, 0.5)
			datos.sonido_on_off()
			if datos.sonido == true then
				gui.play_flipbook(self.sonido_nodo, "sonido on")
			else
				gui.play_flipbook(self.sonido_nodo, "sonido off")
			end
		end
	end
end
