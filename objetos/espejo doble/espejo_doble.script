local datos = require("main.datos")
local distancia_laser = 1400

local function disparar_raycast(self)
	local datos_laser
	if self.normal.x == -1 then
		--print(self.direccion[2])
		self.to.y = distancia_laser * self.direccion[2]
		datos_laser= datos.disparar_rayo(self, self.to)
	elseif self.normal.x == 1 then
		--print(self.direccion[2])
		self.to.y = distancia_laser * self.direccion[2]
		datos_laser = datos.disparar_rayo(self, self.to)
	elseif self.normal.y == -1 then
		--print(self.direccion[1])
		self.to.x = distancia_laser * self.direccion[1]
		datos_laser = datos.disparar_rayo(self, self.to)
	elseif self.normal.y == 1 then
		--print(self.direccion[1])
		self.to.x = distancia_laser * self.direccion[1]
		datos_laser= datos.disparar_rayo(self, self.to)
	end	
	self.to = go.get_position(go.get_id())
	--print(self.normal)
	return datos_laser
	
end

-- laser beam -------------------
local function dist2d(x1, y1, x2, y2)
	return ((x2-x1)^2+(y2-y1)^2)^0.5
end

local function angle_of_vector_between_two_points(x1,y1, x2,y2) 
	return math.atan2(y2-y1, x2-x1) 
end

---------------------------------

function init(self)
	self.to = go.get_position()
	self.pos_rotacion = 1
	self.pos_dirs = 1
	self.rotacion = {0, 90, 180, 270, 360}
	self.direcciones = {{1,1},{-1,1},{-1,-1},{1,-1}}
	self.direccion = self.direcciones[self.pos_dirs]
	self.datos_del_laser = {}
	self.puede_disparar_laser = false
	self.normal = 0
	self.grupo_donde_llego_raycast = nil
	self.datos_laser = {}
	--print(msg.url())
end


function on_message(self, message_id, message, sender)
	--(message)
	if message_id == hash("rayo") then
		--pprint(message)
		--print("rayo doble")
		self.normal = message.normal
		self.grupo_donde_llego_raycast = message.grupo

		if self.grupo_donde_llego_raycast ~= hash("pared") then
			self.disparar_rayo = true
			local datos_laser = disparar_raycast(self)

			local datos_laser2
			local pos_inicial_laser2 = go.get_position()
			self.to = go.get_position()
			if self.normal.x == -1 then
				self.to.x = distancia_laser
				pos_inicial_laser2.x = pos_inicial_laser2.x + 48
				datos_laser2 = datos.disparar_rayo(self, self.to, pos_inicial_laser2)
				pos_inicial_laser2.x = pos_inicial_laser2.x - 68
			elseif self.normal.x == 1 then
				self.to.x = -distancia_laser
				pos_inicial_laser2.x = pos_inicial_laser2.x -48
				datos_laser2 = datos.disparar_rayo(self, self.to, pos_inicial_laser2)
				pos_inicial_laser2.x = pos_inicial_laser2.x + 68
			elseif self.normal.y == -1 then
				self.to.y = distancia_laser
				pos_inicial_laser2.y = pos_inicial_laser2.y + 48
				datos_laser2 = datos.disparar_rayo(self, self.to, pos_inicial_laser2)
				pos_inicial_laser2.y = pos_inicial_laser2.y - 68
			elseif self.normal.y == 1 then
				self.to.y = -distancia_laser
				pos_inicial_laser2.y = pos_inicial_laser2.y - 48
				datos_laser2 = datos.disparar_rayo(self, self.to, pos_inicial_laser2)
				pos_inicial_laser2.y = pos_inicial_laser2.y + 68
			end	
			self.to = go.get_position() -- no se que haría esto acá, borrar si no pasa nada raro.
		else
			self.disparar_rayo = false
			--print(self.disparar_rayo)
		end

	elseif message_id == hash("disparar_ray") then
		--print("disparar ray")
		
		if self.grupo_donde_llego_raycast == hash("pared") then
			-- Esto es cuando llegó el ray/laser y pégó en un pared del espejo, no continua recorrido el laser.
			--print("pared")
			return
		else
			local datos_laser = disparar_raycast(self)
			--pprint(datos_laser)
			msg.post("/gui#gui", "dibujar_laser", {datos = datos_laser, pos_inicial_laser = go.get_position()})
			local datos_laser2
			local pos_inicial_laser2 = go.get_position()
			self.to = go.get_position()
			if self.normal.x == -1 then
				self.to.x = distancia_laser
				pos_inicial_laser2.x = pos_inicial_laser2.x + 48
				datos_laser2 = datos.disparar_rayo(self, self.to, pos_inicial_laser2)
				pos_inicial_laser2.x = pos_inicial_laser2.x - 68
			elseif self.normal.x == 1 then
				self.to.x = -distancia_laser
				pos_inicial_laser2.x = pos_inicial_laser2.x -48
				datos_laser2 = datos.disparar_rayo(self, self.to, pos_inicial_laser2)
				pos_inicial_laser2.x = pos_inicial_laser2.x + 68
			elseif self.normal.y == -1 then
				self.to.y = distancia_laser
				pos_inicial_laser2.y = pos_inicial_laser2.y + 48
				datos_laser2 = datos.disparar_rayo(self, self.to, pos_inicial_laser2)
				pos_inicial_laser2.y = pos_inicial_laser2.y - 68
			elseif self.normal.y == 1 then
				self.to.y = -distancia_laser
				pos_inicial_laser2.y = pos_inicial_laser2.y - 48
				datos_laser2 = datos.disparar_rayo(self, self.to, pos_inicial_laser2)
				pos_inicial_laser2.y = pos_inicial_laser2.y + 68
			end	
			msg.post("/gui#gui", "dibujar_laser", {datos = datos_laser2, pos_inicial_laser = pos_inicial_laser2})
		end


		self.to = go.get_position() -- no se que haría esto acá, borrar si no pasa nada raro.
	elseif message_id == hash("borrar_obj") then
		print("borrar obj")
		go.delete()
	elseif message_id == hash("mover_obj") then
		--print("mover obj fisico: " .. go.get_id())
		go.set_position(message.pos, "")
		self.to = go.get_position()
	end
	if message_id == hash("accion_gui") then
		self.pos_rotacion  = self.pos_rotacion  + message.valor
		if self.pos_rotacion  > table.maxn(self.rotacion) then
			self.pos_rotacion  = 2
		elseif self.pos_rotacion  < 1 then
			self.pos_rotacion  = 4
		end
		go.set(go.get_id(), "euler.z", self.rotacion[self.pos_rotacion ])
		
		self.pos_dirs = self.pos_dirs + message.valor
		if self.pos_dirs > table.maxn(self.direcciones) then
			self.pos_dirs = 1
		elseif self.pos_dirs < 1 then
			self.pos_dirs = 4
		end
		self.direccion = self.direcciones[self.pos_dirs]
	end
end
